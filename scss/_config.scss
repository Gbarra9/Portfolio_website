// COLOR VARIABLES & OTHER VARIABLES
$primary-color: #444;
$secondary-color: #eece1a;
$show-home-images: true;
// Optional linear gradient, instead of using overlay(pseudo-element &:after) --> $home-image: linear-gradient( rgba($primary-color, 0.9), rgba($primary-color, 0.9)),
// url(/dist/img/background.jpg);
$home-image: url(/dist/img/background.jpg);
$background-opacity:0.9;
// MIXINS - MIXINS ARE REUSABLE BITS OF CODE (LIKE JS FUNCTIONS)
// Declare mixin by following the syntax: @mixin mixin_name{code goes here}
// To use mixin follow syntax: @include mixin_name(); [e.g. @include easOut();]
@mixin easeOut {
  // all means change all properties, .5s or half a second, motion of ease out
  // transition takes three values property name | duration | delay
  transition: all 0.5s ease-out;
}

@mixin background {
  // if statement syntax using mixins, if $show-home-images is true then code runs inside code block
  @if $show-home-images {
    // & targets body (include is located in body) and searches for bg-img id
    &#bg-img {
      // without z-index value, elements stack in the order that they appear in DOM (lowest = top of layer)
      // Elements with non-static positioning will always appear on top of elements with default static positioning.
      background: $home-image;
      background-attachment: fixed;
      background-size: cover;
      &:after // creates a pseudo element(not currently in html) after body element (psuedo element inside body element, so pseudo element a child element of body, CSS treats element as an element after body
        {
        // always include content when using before or after
        content: ''; // no content desired after, so leave content inside string blank
        position: absolute; // element removed from flow of document, position starts at nearest parent element with a relative position, if none is avaialable the document body will be the starting position
        top: 0; // position values means side of box-element starts at the specified position
        right: 0;
        width: 100%; // covers 100% of current screen width and height
        height: 100%;
        z-index: -1; // z-index of -1 to push the overlay below other elements in the layer
        background: rgba($primary-color, $background-opacity); // rgba provides transparency, opacity value determines transparency (0 = fully transparent, 1 = fully opaque)
      }
    }
  }
}

// SET TEXT COLOR 
// Use in case $primary-color or other colors need changing
// include this function in the body, reference it by giving color value --> 'set-text-color()'
// Sass function used to return a value, mixins don't return values
// Passing an input to the argument which takes in a color variable (background-color)
// color variable declaration can be any name, has to be declared to receive an input for parameter
@function set-text-color($color) {
  // if color lightness is greater than 40, return color black --> else white
  @if(lightness($color) > 40) {
    @return #000;
  }
  @else {
    @return #fff;
  }
}

// MEDIA QUERY MIXINS
@mixin mediaXsm {
  // applies to media screeen less than width value of 20.625rem(330px)
  @media screen and (max-width: 20.625rem) {
    // anything put inside this mixin in another file will be placed inside
    @content;
  }
}

@mixin mediaSm {
  // applies to media screeen less than width value of 31.25rem (500px)
  @media screen and (max-width: 31.25rem) {
    // anything put inside this mixin in another file will be placed inside
    @content;
  }
}

@mixin mediaMd {
  // applies to media screeen less than width value of 48rem (768px)
  @media screen and (max-width: 48rem) {
    // anything put inside this mixin in another file will be placed inside
    @content;
  }
}

@mixin mediaLg {
  // Creates media query range
  // Applies to media screeen greater than width value of 48.0625rem(769px) and  media screen less than 73.125rem(1170px)
  @media screen and (min-width: 48.0625rem) and (max-width: 31.25rem) {
    // anything put inside this mixin in another file will be placed inside
    @content;
  }
}

@mixin mediaXlg {
  // applies to media screeen greater than width value of 73.1875rem(1171px)
  @media screen and (min-width: 73.1875rem) {
    // anything put inside this mixin in another file will be placed inside
    @content;
  }
}