// MENU BUTTON
.menu-btn {
  // takes container out of document flow
  position: absolute;
  z-index: 3;
  right: 2.1875rem; // positions the container to the top right of the screen
  top: 2.1875rem; // (2.1875rem = 35px)
  cursor: pointer; // turns cursor into pointer when user is within .menu-btn container range
  @include easeOut(); // transiton mixin
  .btn-line {
    // there are three div containers with .btn-line class, each div container has 28px width and 3px height
    width: 1.75rem; //(1.75rem = 28px)
    height: 0.1875rem; //(.1875rem = 3px;)
    margin: 0 0 0.3125rem 0; // (.3125rem = 5px) bottom margin on all divs with this class
    background: #fff;
    @include easeOut();
  } // ROTATE INTO X WITH MENU LINES
  // Note: JS added class 'close' to div with class 'menu-btn'
  // & refers to .menu-btn
  &.close {
    // rotates the btn-line 180deg
    transform: rotate(180deg);
    .btn-line {
      // Line 1 - Rotate
      // :nthchild() selects child element,takes numerical input value (numerical value indicates child element based on current order)
      &:nth-child(1) {
        // &:nth-child(1) targets first element/item with class of '.btn-line'
        transform: rotate(45deg) translate(0.3125rem, 0.3125rem); //(.3125rem = 5px)
      } // Line 2 - Hide
      &:nth-child(2) {
        // &:nth-child(2) targets first element/item with class of '.btn-line'
        opacity: 0; // opacity 0 = fully transparent, hides 2nd btn-line
        // Line 3 - Rotate
      }
      &:nth-child(3) {
        // &:nth-child(3) targets first element/item with class of '.btn-line'
        // rotate -45deg, change inputs to 7px, -6px
        transform: rotate(-45deg) translate(0.4375rem, -0.375rem); //(.4375rem = 7px, .375rem = 6px)
      }
    }
  }
}

// MENU OVERLAY
.menu {
  // position stays in same place even when scrolling
  position: fixed;
  top: 0;
  width: 100%; //gives 100% width to menu coantainer
  opacity: 0.9; //creates transparency effect
  visibility: hidden; //hides menu container
  &.show {
    // NOTE: 'show' class gets added to menu from JS, when '.menu-btn' clicked
    visibility: visible; //container reappears
  }
  &-branding,
  &-nav {
    // '&' refers to menu (same as 'menu-branding' or 'menu-nav')
    // defines container as a flex container
    display: flex; // flex-wrap controls whether the items are forced in a singe line (default: no-wrap) or can flow into multiple lines (wrap/wrap-reverse)
    flex-flow: column wrap; // shorthand for flex-direction (column) and flex-wrap (wrap), note: column value changes original main-axis to a cross-axis
    align-items: center; // defines how flex items are positioned along cross-axis
    justify-content: center; // defines how flex items are positioned along main-axis
    float: left; // floats container to left, items will start floating from left to right
    width: 50%; // each container has width of 50% of current screen
    height: 100vh; // takes entire height of current screen, each one takes up full height of current screen
    overflow: hidden; // hide scrollbars
  }
  &-nav {
    // resets margin/padding to 0
    margin: 0;
    padding: 0;
    background: darken( $primary-color, 5); // darken: exclusive to sass, similar to lighten which takes two input values
    list-style: none; // gets rid of bullet points for list items
    transform: translate3d( 0, -100%, 0); // sent to the top 100% value because of negative value, when invisible,
    @include easeOut; // mixin transition effect
    &.show {
      // Slide in effect from top
      transform: translate3d( 0, 0, 0); // when 'menu-nav' gets a 'show' class added on, it become visible and brings element with 'menu-nav' down to normal position
    }
  } // Branding Side
  &-branding {
    background: $primary-color;
    @include easeOut;
    transform: translate3d(0, 100%, 0); // pushing 'menu-branding' 100% up when not visible
    &.show {
      // Slide in effect from bottom
      transform: translate3d( 0, 0, 0); // brings 'menu-branding'  to normal position
    }
    .portrait {
      // (15.625rem =15.625px)
      width: 15.625rem;
      height: 15.625rem;
      background: url(); // ~~~~~~ADD A PROFILE PIC HERE~~~~~~~~~~~~~~~~~
      border-radius: 50%; // creates the circular border for image
      border: solid 3px $secondary-color;
    }
  }
  .nav-item {
    transform: translate3d(37.5rem, 0, 0); // moves nav items 37.5rem(600px) to the right of screen 
    @include easeOut; //mixin transition effect
    &.show {
      // Slide in from right when 'show' class is added
      transform: translate3d(0, 0, 0);
    }
    &.current>a {
      // ' > 'targets a child element
      // first list item with 'nav-item current' and the child element 'a'
      color: $secondary-color;
    }
  }
  .nav-link {
    // style links / a tags
    display: inline-block; // inline-block to change width,height,padding values of links, original display was inline
    position: relative;
    font-size: 1.875rem; // (1.875rem = 16px)
    text-transform: uppercase;
    padding: 1rem 0; // (1rem = 16px) apply top and bottom padding
    font-weight: 300;
    color: #fff;
    text-decoration: none;
    @include easeOut;
    &:hover {
      color: $secondary-color;
    }
  }
}

// DELAY EACH NAV ITEM SLIDE BY 0.1s
// (Reason: the nav-items are sliding diagonally)
// Similar to for(let x = 0; i < 4;i++)
// $x, x represents a variable name (any name) , the syntax is used as an increment
@for $x from 1 through 4 {
  // similar to template literal/string in JS ${} --> #{}
  // For each :nth-child create a function delay (:nth-child a pseudo-class that matches based on position in a group of siblings)
  .nav-item:nth-child(#{$x}) {
    // $x represents a number starting at 1 and going to 4
    // each item will be delayed at different times (first item= 1*.1s, second-item 2*.1s ...)
    transition-delay: $x * 0.1s;
  }
}